// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.1
//   protoc               v3.12.4
// source: services/ecommerce/v1/payments.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Meta } from "../../../common/messages";

export const protobufPackage = "services.ecommerce.v1.payments";

export enum PaymentMethod {
  UPI = 0,
  CREDIT_CARD = 1,
  DEBIT_CARD = 2,
  NET_BANKING = 3,
  PAY_ON_DELIVERY = 4,
  UNRECOGNIZED = -1,
}

export function paymentMethodFromJSON(object: any): PaymentMethod {
  switch (object) {
    case 0:
    case "UPI":
      return PaymentMethod.UPI;
    case 1:
    case "CREDIT_CARD":
      return PaymentMethod.CREDIT_CARD;
    case 2:
    case "DEBIT_CARD":
      return PaymentMethod.DEBIT_CARD;
    case 3:
    case "NET_BANKING":
      return PaymentMethod.NET_BANKING;
    case 4:
    case "PAY_ON_DELIVERY":
      return PaymentMethod.PAY_ON_DELIVERY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PaymentMethod.UNRECOGNIZED;
  }
}

export function paymentMethodToJSON(object: PaymentMethod): string {
  switch (object) {
    case PaymentMethod.UPI:
      return "UPI";
    case PaymentMethod.CREDIT_CARD:
      return "CREDIT_CARD";
    case PaymentMethod.DEBIT_CARD:
      return "DEBIT_CARD";
    case PaymentMethod.NET_BANKING:
      return "NET_BANKING";
    case PaymentMethod.PAY_ON_DELIVERY:
      return "PAY_ON_DELIVERY";
    case PaymentMethod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PaymentStatus {
  /** PAYMENT_STATUS_INITIATED - On initiating payment */
  PAYMENT_STATUS_INITIATED = 0,
  /** PAYMENT_STATUS_PENDING - On payment with payment gateway / bank */
  PAYMENT_STATUS_PENDING = 1,
  /** PAYMENT_STATUS_FULFILLED - On payment received */
  PAYMENT_STATUS_FULFILLED = 2,
  /** PAYMENT_STATUS_FAILED - On payment failure */
  PAYMENT_STATUS_FAILED = 3,
  /** PAYMENT_STATUS_REFUND_INITIATED - On order cancellation / damaged product */
  PAYMENT_STATUS_REFUND_INITIATED = 4,
  /** PAYMENT_STATUS_REFUND_PENDING - On refund payment with payment gateway / bank */
  PAYMENT_STATUS_REFUND_PENDING = 5,
  /** PAYMENT_STATUS_REFUND_FULFILLED - On refund payment success */
  PAYMENT_STATUS_REFUND_FULFILLED = 6,
  UNRECOGNIZED = -1,
}

export function paymentStatusFromJSON(object: any): PaymentStatus {
  switch (object) {
    case 0:
    case "PAYMENT_STATUS_INITIATED":
      return PaymentStatus.PAYMENT_STATUS_INITIATED;
    case 1:
    case "PAYMENT_STATUS_PENDING":
      return PaymentStatus.PAYMENT_STATUS_PENDING;
    case 2:
    case "PAYMENT_STATUS_FULFILLED":
      return PaymentStatus.PAYMENT_STATUS_FULFILLED;
    case 3:
    case "PAYMENT_STATUS_FAILED":
      return PaymentStatus.PAYMENT_STATUS_FAILED;
    case 4:
    case "PAYMENT_STATUS_REFUND_INITIATED":
      return PaymentStatus.PAYMENT_STATUS_REFUND_INITIATED;
    case 5:
    case "PAYMENT_STATUS_REFUND_PENDING":
      return PaymentStatus.PAYMENT_STATUS_REFUND_PENDING;
    case 6:
    case "PAYMENT_STATUS_REFUND_FULFILLED":
      return PaymentStatus.PAYMENT_STATUS_REFUND_FULFILLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PaymentStatus.UNRECOGNIZED;
  }
}

export function paymentStatusToJSON(object: PaymentStatus): string {
  switch (object) {
    case PaymentStatus.PAYMENT_STATUS_INITIATED:
      return "PAYMENT_STATUS_INITIATED";
    case PaymentStatus.PAYMENT_STATUS_PENDING:
      return "PAYMENT_STATUS_PENDING";
    case PaymentStatus.PAYMENT_STATUS_FULFILLED:
      return "PAYMENT_STATUS_FULFILLED";
    case PaymentStatus.PAYMENT_STATUS_FAILED:
      return "PAYMENT_STATUS_FAILED";
    case PaymentStatus.PAYMENT_STATUS_REFUND_INITIATED:
      return "PAYMENT_STATUS_REFUND_INITIATED";
    case PaymentStatus.PAYMENT_STATUS_REFUND_PENDING:
      return "PAYMENT_STATUS_REFUND_PENDING";
    case PaymentStatus.PAYMENT_STATUS_REFUND_FULFILLED:
      return "PAYMENT_STATUS_REFUND_FULFILLED";
    case PaymentStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Payment {
  meta?: Meta | undefined;
  paymentMethod: PaymentMethod;
  status: PaymentStatus;
}

export interface InitiatePaymentRequest {
  orderId: string;
  amount: number;
  paymentMethod: PaymentMethod;
}

export interface InitiatePaymentResponse {
  paymentId: string;
}

export interface UpdatePaymentStatusRequest {
  paymentId: string;
  status: PaymentStatus;
}

export interface UpdatePaymentStatusResponse {
}

export interface InitiateRefundRequest {
  orderId: string;
  productId: string;
  sellerId: string;
  quantity: number;
  amount: number;
}

export interface InitiateRefundResponse {
}

/** Only for internal use */
export interface PaymentInternal {
  meta?: Meta | undefined;
  orderId: string;
  productId: string;
  sellerId: string;
  quantity: number;
  amount: number;
  paymentMethod: PaymentMethod;
  status: PaymentStatus;
}

function createBasePayment(): Payment {
  return { meta: undefined, paymentMethod: 0, status: 0 };
}

export const Payment: MessageFns<Payment> = {
  encode(message: Payment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.meta !== undefined) {
      Meta.encode(message.meta, writer.uint32(10).fork()).join();
    }
    if (message.paymentMethod !== 0) {
      writer.uint32(24).int32(message.paymentMethod);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Payment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.meta = Meta.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.paymentMethod = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Payment {
    return {
      meta: isSet(object.meta) ? Meta.fromJSON(object.meta) : undefined,
      paymentMethod: isSet(object.paymentMethod) ? paymentMethodFromJSON(object.paymentMethod) : 0,
      status: isSet(object.status) ? paymentStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: Payment): unknown {
    const obj: any = {};
    if (message.meta !== undefined) {
      obj.meta = Meta.toJSON(message.meta);
    }
    if (message.paymentMethod !== 0) {
      obj.paymentMethod = paymentMethodToJSON(message.paymentMethod);
    }
    if (message.status !== 0) {
      obj.status = paymentStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Payment>, I>>(base?: I): Payment {
    return Payment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Payment>, I>>(object: I): Payment {
    const message = createBasePayment();
    message.meta = (object.meta !== undefined && object.meta !== null) ? Meta.fromPartial(object.meta) : undefined;
    message.paymentMethod = object.paymentMethod ?? 0;
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseInitiatePaymentRequest(): InitiatePaymentRequest {
  return { orderId: "", amount: 0, paymentMethod: 0 };
}

export const InitiatePaymentRequest: MessageFns<InitiatePaymentRequest> = {
  encode(message: InitiatePaymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderId !== "") {
      writer.uint32(10).string(message.orderId);
    }
    if (message.amount !== 0) {
      writer.uint32(17).double(message.amount);
    }
    if (message.paymentMethod !== 0) {
      writer.uint32(24).int32(message.paymentMethod);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InitiatePaymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitiatePaymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.amount = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.paymentMethod = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitiatePaymentRequest {
    return {
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      paymentMethod: isSet(object.paymentMethod) ? paymentMethodFromJSON(object.paymentMethod) : 0,
    };
  },

  toJSON(message: InitiatePaymentRequest): unknown {
    const obj: any = {};
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    if (message.paymentMethod !== 0) {
      obj.paymentMethod = paymentMethodToJSON(message.paymentMethod);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InitiatePaymentRequest>, I>>(base?: I): InitiatePaymentRequest {
    return InitiatePaymentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InitiatePaymentRequest>, I>>(object: I): InitiatePaymentRequest {
    const message = createBaseInitiatePaymentRequest();
    message.orderId = object.orderId ?? "";
    message.amount = object.amount ?? 0;
    message.paymentMethod = object.paymentMethod ?? 0;
    return message;
  },
};

function createBaseInitiatePaymentResponse(): InitiatePaymentResponse {
  return { paymentId: "" };
}

export const InitiatePaymentResponse: MessageFns<InitiatePaymentResponse> = {
  encode(message: InitiatePaymentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.paymentId !== "") {
      writer.uint32(10).string(message.paymentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InitiatePaymentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitiatePaymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.paymentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitiatePaymentResponse {
    return { paymentId: isSet(object.paymentId) ? globalThis.String(object.paymentId) : "" };
  },

  toJSON(message: InitiatePaymentResponse): unknown {
    const obj: any = {};
    if (message.paymentId !== "") {
      obj.paymentId = message.paymentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InitiatePaymentResponse>, I>>(base?: I): InitiatePaymentResponse {
    return InitiatePaymentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InitiatePaymentResponse>, I>>(object: I): InitiatePaymentResponse {
    const message = createBaseInitiatePaymentResponse();
    message.paymentId = object.paymentId ?? "";
    return message;
  },
};

function createBaseUpdatePaymentStatusRequest(): UpdatePaymentStatusRequest {
  return { paymentId: "", status: 0 };
}

export const UpdatePaymentStatusRequest: MessageFns<UpdatePaymentStatusRequest> = {
  encode(message: UpdatePaymentStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.paymentId !== "") {
      writer.uint32(10).string(message.paymentId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePaymentStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePaymentStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.paymentId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePaymentStatusRequest {
    return {
      paymentId: isSet(object.paymentId) ? globalThis.String(object.paymentId) : "",
      status: isSet(object.status) ? paymentStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: UpdatePaymentStatusRequest): unknown {
    const obj: any = {};
    if (message.paymentId !== "") {
      obj.paymentId = message.paymentId;
    }
    if (message.status !== 0) {
      obj.status = paymentStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePaymentStatusRequest>, I>>(base?: I): UpdatePaymentStatusRequest {
    return UpdatePaymentStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePaymentStatusRequest>, I>>(object: I): UpdatePaymentStatusRequest {
    const message = createBaseUpdatePaymentStatusRequest();
    message.paymentId = object.paymentId ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseUpdatePaymentStatusResponse(): UpdatePaymentStatusResponse {
  return {};
}

export const UpdatePaymentStatusResponse: MessageFns<UpdatePaymentStatusResponse> = {
  encode(_: UpdatePaymentStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePaymentStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePaymentStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdatePaymentStatusResponse {
    return {};
  },

  toJSON(_: UpdatePaymentStatusResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePaymentStatusResponse>, I>>(base?: I): UpdatePaymentStatusResponse {
    return UpdatePaymentStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePaymentStatusResponse>, I>>(_: I): UpdatePaymentStatusResponse {
    const message = createBaseUpdatePaymentStatusResponse();
    return message;
  },
};

function createBaseInitiateRefundRequest(): InitiateRefundRequest {
  return { orderId: "", productId: "", sellerId: "", quantity: 0, amount: 0 };
}

export const InitiateRefundRequest: MessageFns<InitiateRefundRequest> = {
  encode(message: InitiateRefundRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderId !== "") {
      writer.uint32(10).string(message.orderId);
    }
    if (message.productId !== "") {
      writer.uint32(18).string(message.productId);
    }
    if (message.sellerId !== "") {
      writer.uint32(26).string(message.sellerId);
    }
    if (message.quantity !== 0) {
      writer.uint32(32).int32(message.quantity);
    }
    if (message.amount !== 0) {
      writer.uint32(41).double(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InitiateRefundRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitiateRefundRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sellerId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.amount = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitiateRefundRequest {
    return {
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      sellerId: isSet(object.sellerId) ? globalThis.String(object.sellerId) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: InitiateRefundRequest): unknown {
    const obj: any = {};
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.sellerId !== "") {
      obj.sellerId = message.sellerId;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InitiateRefundRequest>, I>>(base?: I): InitiateRefundRequest {
    return InitiateRefundRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InitiateRefundRequest>, I>>(object: I): InitiateRefundRequest {
    const message = createBaseInitiateRefundRequest();
    message.orderId = object.orderId ?? "";
    message.productId = object.productId ?? "";
    message.sellerId = object.sellerId ?? "";
    message.quantity = object.quantity ?? 0;
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseInitiateRefundResponse(): InitiateRefundResponse {
  return {};
}

export const InitiateRefundResponse: MessageFns<InitiateRefundResponse> = {
  encode(_: InitiateRefundResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InitiateRefundResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitiateRefundResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): InitiateRefundResponse {
    return {};
  },

  toJSON(_: InitiateRefundResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<InitiateRefundResponse>, I>>(base?: I): InitiateRefundResponse {
    return InitiateRefundResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InitiateRefundResponse>, I>>(_: I): InitiateRefundResponse {
    const message = createBaseInitiateRefundResponse();
    return message;
  },
};

function createBasePaymentInternal(): PaymentInternal {
  return {
    meta: undefined,
    orderId: "",
    productId: "",
    sellerId: "",
    quantity: 0,
    amount: 0,
    paymentMethod: 0,
    status: 0,
  };
}

export const PaymentInternal: MessageFns<PaymentInternal> = {
  encode(message: PaymentInternal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.meta !== undefined) {
      Meta.encode(message.meta, writer.uint32(10).fork()).join();
    }
    if (message.orderId !== "") {
      writer.uint32(18).string(message.orderId);
    }
    if (message.productId !== "") {
      writer.uint32(26).string(message.productId);
    }
    if (message.sellerId !== "") {
      writer.uint32(34).string(message.sellerId);
    }
    if (message.quantity !== 0) {
      writer.uint32(40).int32(message.quantity);
    }
    if (message.amount !== 0) {
      writer.uint32(49).double(message.amount);
    }
    if (message.paymentMethod !== 0) {
      writer.uint32(56).int32(message.paymentMethod);
    }
    if (message.status !== 0) {
      writer.uint32(64).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentInternal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentInternal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.meta = Meta.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sellerId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.amount = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.paymentMethod = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentInternal {
    return {
      meta: isSet(object.meta) ? Meta.fromJSON(object.meta) : undefined,
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      sellerId: isSet(object.sellerId) ? globalThis.String(object.sellerId) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      paymentMethod: isSet(object.paymentMethod) ? paymentMethodFromJSON(object.paymentMethod) : 0,
      status: isSet(object.status) ? paymentStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: PaymentInternal): unknown {
    const obj: any = {};
    if (message.meta !== undefined) {
      obj.meta = Meta.toJSON(message.meta);
    }
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.sellerId !== "") {
      obj.sellerId = message.sellerId;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    if (message.paymentMethod !== 0) {
      obj.paymentMethod = paymentMethodToJSON(message.paymentMethod);
    }
    if (message.status !== 0) {
      obj.status = paymentStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentInternal>, I>>(base?: I): PaymentInternal {
    return PaymentInternal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentInternal>, I>>(object: I): PaymentInternal {
    const message = createBasePaymentInternal();
    message.meta = (object.meta !== undefined && object.meta !== null) ? Meta.fromPartial(object.meta) : undefined;
    message.orderId = object.orderId ?? "";
    message.productId = object.productId ?? "";
    message.sellerId = object.sellerId ?? "";
    message.quantity = object.quantity ?? 0;
    message.amount = object.amount ?? 0;
    message.paymentMethod = object.paymentMethod ?? 0;
    message.status = object.status ?? 0;
    return message;
  },
};

export interface PaymentService {
  InitiatePayment(request: InitiatePaymentRequest): Promise<InitiatePaymentResponse>;
  UpdatePaymentStatus(request: UpdatePaymentStatusRequest): Promise<UpdatePaymentStatusResponse>;
  InitiateRefund(request: InitiateRefundRequest): Promise<InitiateRefundResponse>;
}

export const PaymentServiceServiceName = "services.ecommerce.v1.payments.PaymentService";
export class PaymentServiceClientImpl implements PaymentService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || PaymentServiceServiceName;
    this.rpc = rpc;
    this.InitiatePayment = this.InitiatePayment.bind(this);
    this.UpdatePaymentStatus = this.UpdatePaymentStatus.bind(this);
    this.InitiateRefund = this.InitiateRefund.bind(this);
  }
  InitiatePayment(request: InitiatePaymentRequest): Promise<InitiatePaymentResponse> {
    const data = InitiatePaymentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "InitiatePayment", data);
    return promise.then((data) => InitiatePaymentResponse.decode(new BinaryReader(data)));
  }

  UpdatePaymentStatus(request: UpdatePaymentStatusRequest): Promise<UpdatePaymentStatusResponse> {
    const data = UpdatePaymentStatusRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdatePaymentStatus", data);
    return promise.then((data) => UpdatePaymentStatusResponse.decode(new BinaryReader(data)));
  }

  InitiateRefund(request: InitiateRefundRequest): Promise<InitiateRefundResponse> {
    const data = InitiateRefundRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "InitiateRefund", data);
    return promise.then((data) => InitiateRefundResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
