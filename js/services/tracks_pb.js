// source: services/tracks.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var services_common_pb = require('../services/common_pb.js');
goog.object.extend(proto, services_common_pb);
goog.exportSymbol('proto.services.tracks.AddSoundtrackRequest', null, global);
goog.exportSymbol('proto.services.tracks.AddSoundtrackResponse', null, global);
goog.exportSymbol('proto.services.tracks.DeleteSoundtrackRequest', null, global);
goog.exportSymbol('proto.services.tracks.DeleteSoundtrackRequest.ParamsCase', null, global);
goog.exportSymbol('proto.services.tracks.DeleteSoundtrackResponse', null, global);
goog.exportSymbol('proto.services.tracks.GetMovieSoundtrackRequest', null, global);
goog.exportSymbol('proto.services.tracks.GetMovieSoundtrackResponse', null, global);
goog.exportSymbol('proto.services.tracks.GetSoundtrackRequest', null, global);
goog.exportSymbol('proto.services.tracks.GetSoundtrackRequest.ParamsCase', null, global);
goog.exportSymbol('proto.services.tracks.GetSoundtrackResponse', null, global);
goog.exportSymbol('proto.services.tracks.ListSoundtracksRequest', null, global);
goog.exportSymbol('proto.services.tracks.ListSoundtracksRequest.FilterBy', null, global);
goog.exportSymbol('proto.services.tracks.ListSoundtracksResponse', null, global);
goog.exportSymbol('proto.services.tracks.Soundtrack', null, global);
goog.exportSymbol('proto.services.tracks.UpdateSoundtrackRequest', null, global);
goog.exportSymbol('proto.services.tracks.UpdateSoundtrackResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.tracks.Soundtrack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.services.tracks.Soundtrack.repeatedFields_, null);
};
goog.inherits(proto.services.tracks.Soundtrack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.tracks.Soundtrack.displayName = 'proto.services.tracks.Soundtrack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.tracks.AddSoundtrackRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.tracks.AddSoundtrackRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.tracks.AddSoundtrackRequest.displayName = 'proto.services.tracks.AddSoundtrackRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.tracks.AddSoundtrackResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.tracks.AddSoundtrackResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.tracks.AddSoundtrackResponse.displayName = 'proto.services.tracks.AddSoundtrackResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.tracks.ListSoundtracksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.tracks.ListSoundtracksRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.tracks.ListSoundtracksRequest.displayName = 'proto.services.tracks.ListSoundtracksRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.tracks.ListSoundtracksResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.services.tracks.ListSoundtracksResponse.repeatedFields_, null);
};
goog.inherits(proto.services.tracks.ListSoundtracksResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.tracks.ListSoundtracksResponse.displayName = 'proto.services.tracks.ListSoundtracksResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.tracks.DeleteSoundtrackRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.services.tracks.DeleteSoundtrackRequest.oneofGroups_);
};
goog.inherits(proto.services.tracks.DeleteSoundtrackRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.tracks.DeleteSoundtrackRequest.displayName = 'proto.services.tracks.DeleteSoundtrackRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.tracks.DeleteSoundtrackResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.tracks.DeleteSoundtrackResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.tracks.DeleteSoundtrackResponse.displayName = 'proto.services.tracks.DeleteSoundtrackResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.tracks.UpdateSoundtrackRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.tracks.UpdateSoundtrackRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.tracks.UpdateSoundtrackRequest.displayName = 'proto.services.tracks.UpdateSoundtrackRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.tracks.UpdateSoundtrackResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.tracks.UpdateSoundtrackResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.tracks.UpdateSoundtrackResponse.displayName = 'proto.services.tracks.UpdateSoundtrackResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.tracks.GetSoundtrackRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.services.tracks.GetSoundtrackRequest.oneofGroups_);
};
goog.inherits(proto.services.tracks.GetSoundtrackRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.tracks.GetSoundtrackRequest.displayName = 'proto.services.tracks.GetSoundtrackRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.tracks.GetSoundtrackResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.tracks.GetSoundtrackResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.tracks.GetSoundtrackResponse.displayName = 'proto.services.tracks.GetSoundtrackResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.tracks.GetMovieSoundtrackRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.services.tracks.GetMovieSoundtrackRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.tracks.GetMovieSoundtrackRequest.displayName = 'proto.services.tracks.GetMovieSoundtrackRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.services.tracks.GetMovieSoundtrackResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.services.tracks.GetMovieSoundtrackResponse.repeatedFields_, null);
};
goog.inherits(proto.services.tracks.GetMovieSoundtrackResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.services.tracks.GetMovieSoundtrackResponse.displayName = 'proto.services.tracks.GetMovieSoundtrackResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.tracks.Soundtrack.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.tracks.Soundtrack.prototype.toObject = function(opt_includeInstance) {
  return proto.services.tracks.Soundtrack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.tracks.Soundtrack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.Soundtrack.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && services_common_pb.Meta.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    artist: jspb.Message.getFieldWithDefault(msg, 3, ""),
    year: jspb.Message.getFieldWithDefault(msg, 4, 0),
    featuresInList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.tracks.Soundtrack}
 */
proto.services.tracks.Soundtrack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.tracks.Soundtrack;
  return proto.services.tracks.Soundtrack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.tracks.Soundtrack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.tracks.Soundtrack}
 */
proto.services.tracks.Soundtrack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new services_common_pb.Meta;
      reader.readMessage(value,services_common_pb.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setArtist(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYear(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addFeaturesIn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.tracks.Soundtrack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.tracks.Soundtrack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.tracks.Soundtrack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.Soundtrack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      services_common_pb.Meta.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getArtist();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getYear();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getFeaturesInList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional services.common.Meta meta = 1;
 * @return {?proto.services.common.Meta}
 */
proto.services.tracks.Soundtrack.prototype.getMeta = function() {
  return /** @type{?proto.services.common.Meta} */ (
    jspb.Message.getWrapperField(this, services_common_pb.Meta, 1));
};


/**
 * @param {?proto.services.common.Meta|undefined} value
 * @return {!proto.services.tracks.Soundtrack} returns this
*/
proto.services.tracks.Soundtrack.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.tracks.Soundtrack} returns this
 */
proto.services.tracks.Soundtrack.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.tracks.Soundtrack.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.services.tracks.Soundtrack.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.tracks.Soundtrack} returns this
 */
proto.services.tracks.Soundtrack.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string artist = 3;
 * @return {string}
 */
proto.services.tracks.Soundtrack.prototype.getArtist = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.tracks.Soundtrack} returns this
 */
proto.services.tracks.Soundtrack.prototype.setArtist = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 year = 4;
 * @return {number}
 */
proto.services.tracks.Soundtrack.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.services.tracks.Soundtrack} returns this
 */
proto.services.tracks.Soundtrack.prototype.setYear = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated string features_in = 5;
 * @return {!Array<string>}
 */
proto.services.tracks.Soundtrack.prototype.getFeaturesInList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.services.tracks.Soundtrack} returns this
 */
proto.services.tracks.Soundtrack.prototype.setFeaturesInList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.services.tracks.Soundtrack} returns this
 */
proto.services.tracks.Soundtrack.prototype.addFeaturesIn = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.services.tracks.Soundtrack} returns this
 */
proto.services.tracks.Soundtrack.prototype.clearFeaturesInList = function() {
  return this.setFeaturesInList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.tracks.AddSoundtrackRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.tracks.AddSoundtrackRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.tracks.AddSoundtrackRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.AddSoundtrackRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    soundtrack: (f = msg.getSoundtrack()) && proto.services.tracks.Soundtrack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.tracks.AddSoundtrackRequest}
 */
proto.services.tracks.AddSoundtrackRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.tracks.AddSoundtrackRequest;
  return proto.services.tracks.AddSoundtrackRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.tracks.AddSoundtrackRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.tracks.AddSoundtrackRequest}
 */
proto.services.tracks.AddSoundtrackRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.tracks.Soundtrack;
      reader.readMessage(value,proto.services.tracks.Soundtrack.deserializeBinaryFromReader);
      msg.setSoundtrack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.tracks.AddSoundtrackRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.tracks.AddSoundtrackRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.tracks.AddSoundtrackRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.AddSoundtrackRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoundtrack();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.tracks.Soundtrack.serializeBinaryToWriter
    );
  }
};


/**
 * optional Soundtrack soundtrack = 1;
 * @return {?proto.services.tracks.Soundtrack}
 */
proto.services.tracks.AddSoundtrackRequest.prototype.getSoundtrack = function() {
  return /** @type{?proto.services.tracks.Soundtrack} */ (
    jspb.Message.getWrapperField(this, proto.services.tracks.Soundtrack, 1));
};


/**
 * @param {?proto.services.tracks.Soundtrack|undefined} value
 * @return {!proto.services.tracks.AddSoundtrackRequest} returns this
*/
proto.services.tracks.AddSoundtrackRequest.prototype.setSoundtrack = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.tracks.AddSoundtrackRequest} returns this
 */
proto.services.tracks.AddSoundtrackRequest.prototype.clearSoundtrack = function() {
  return this.setSoundtrack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.tracks.AddSoundtrackRequest.prototype.hasSoundtrack = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.tracks.AddSoundtrackResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.tracks.AddSoundtrackResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.tracks.AddSoundtrackResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.AddSoundtrackResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    soundtrack: (f = msg.getSoundtrack()) && proto.services.tracks.Soundtrack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.tracks.AddSoundtrackResponse}
 */
proto.services.tracks.AddSoundtrackResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.tracks.AddSoundtrackResponse;
  return proto.services.tracks.AddSoundtrackResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.tracks.AddSoundtrackResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.tracks.AddSoundtrackResponse}
 */
proto.services.tracks.AddSoundtrackResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.tracks.Soundtrack;
      reader.readMessage(value,proto.services.tracks.Soundtrack.deserializeBinaryFromReader);
      msg.setSoundtrack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.tracks.AddSoundtrackResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.tracks.AddSoundtrackResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.tracks.AddSoundtrackResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.AddSoundtrackResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoundtrack();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.tracks.Soundtrack.serializeBinaryToWriter
    );
  }
};


/**
 * optional Soundtrack soundtrack = 1;
 * @return {?proto.services.tracks.Soundtrack}
 */
proto.services.tracks.AddSoundtrackResponse.prototype.getSoundtrack = function() {
  return /** @type{?proto.services.tracks.Soundtrack} */ (
    jspb.Message.getWrapperField(this, proto.services.tracks.Soundtrack, 1));
};


/**
 * @param {?proto.services.tracks.Soundtrack|undefined} value
 * @return {!proto.services.tracks.AddSoundtrackResponse} returns this
*/
proto.services.tracks.AddSoundtrackResponse.prototype.setSoundtrack = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.tracks.AddSoundtrackResponse} returns this
 */
proto.services.tracks.AddSoundtrackResponse.prototype.clearSoundtrack = function() {
  return this.setSoundtrack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.tracks.AddSoundtrackResponse.prototype.hasSoundtrack = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.tracks.ListSoundtracksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.tracks.ListSoundtracksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.tracks.ListSoundtracksRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.ListSoundtracksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    options: (f = msg.getOptions()) && services_common_pb.PageOptions.toObject(includeInstance, f),
    searchTerm: jspb.Message.getFieldWithDefault(msg, 2, ""),
    filterBy: jspb.Message.getFieldWithDefault(msg, 3, 0),
    includeDeleted: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.tracks.ListSoundtracksRequest}
 */
proto.services.tracks.ListSoundtracksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.tracks.ListSoundtracksRequest;
  return proto.services.tracks.ListSoundtracksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.tracks.ListSoundtracksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.tracks.ListSoundtracksRequest}
 */
proto.services.tracks.ListSoundtracksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new services_common_pb.PageOptions;
      reader.readMessage(value,services_common_pb.PageOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearchTerm(value);
      break;
    case 3:
      var value = /** @type {!proto.services.tracks.ListSoundtracksRequest.FilterBy} */ (reader.readEnum());
      msg.setFilterBy(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeDeleted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.tracks.ListSoundtracksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.tracks.ListSoundtracksRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.tracks.ListSoundtracksRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.ListSoundtracksRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      services_common_pb.PageOptions.serializeBinaryToWriter
    );
  }
  f = message.getSearchTerm();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFilterBy();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getIncludeDeleted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.services.tracks.ListSoundtracksRequest.FilterBy = {
  NAME: 0,
  ARTIST: 1,
  YEAR: 2,
  MOVIE: 3
};

/**
 * optional services.common.PageOptions options = 1;
 * @return {?proto.services.common.PageOptions}
 */
proto.services.tracks.ListSoundtracksRequest.prototype.getOptions = function() {
  return /** @type{?proto.services.common.PageOptions} */ (
    jspb.Message.getWrapperField(this, services_common_pb.PageOptions, 1));
};


/**
 * @param {?proto.services.common.PageOptions|undefined} value
 * @return {!proto.services.tracks.ListSoundtracksRequest} returns this
*/
proto.services.tracks.ListSoundtracksRequest.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.tracks.ListSoundtracksRequest} returns this
 */
proto.services.tracks.ListSoundtracksRequest.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.tracks.ListSoundtracksRequest.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string search_term = 2;
 * @return {string}
 */
proto.services.tracks.ListSoundtracksRequest.prototype.getSearchTerm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.tracks.ListSoundtracksRequest} returns this
 */
proto.services.tracks.ListSoundtracksRequest.prototype.setSearchTerm = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional FilterBy filter_by = 3;
 * @return {!proto.services.tracks.ListSoundtracksRequest.FilterBy}
 */
proto.services.tracks.ListSoundtracksRequest.prototype.getFilterBy = function() {
  return /** @type {!proto.services.tracks.ListSoundtracksRequest.FilterBy} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.services.tracks.ListSoundtracksRequest.FilterBy} value
 * @return {!proto.services.tracks.ListSoundtracksRequest} returns this
 */
proto.services.tracks.ListSoundtracksRequest.prototype.setFilterBy = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bool include_deleted = 4;
 * @return {boolean}
 */
proto.services.tracks.ListSoundtracksRequest.prototype.getIncludeDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.services.tracks.ListSoundtracksRequest} returns this
 */
proto.services.tracks.ListSoundtracksRequest.prototype.setIncludeDeleted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.tracks.ListSoundtracksResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.tracks.ListSoundtracksResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.tracks.ListSoundtracksResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.tracks.ListSoundtracksResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.ListSoundtracksResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    soundtracksList: jspb.Message.toObjectList(msg.getSoundtracksList(),
    proto.services.tracks.Soundtrack.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.tracks.ListSoundtracksResponse}
 */
proto.services.tracks.ListSoundtracksResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.tracks.ListSoundtracksResponse;
  return proto.services.tracks.ListSoundtracksResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.tracks.ListSoundtracksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.tracks.ListSoundtracksResponse}
 */
proto.services.tracks.ListSoundtracksResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.tracks.Soundtrack;
      reader.readMessage(value,proto.services.tracks.Soundtrack.deserializeBinaryFromReader);
      msg.addSoundtracks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.tracks.ListSoundtracksResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.tracks.ListSoundtracksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.tracks.ListSoundtracksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.ListSoundtracksResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoundtracksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.services.tracks.Soundtrack.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Soundtrack soundtracks = 1;
 * @return {!Array<!proto.services.tracks.Soundtrack>}
 */
proto.services.tracks.ListSoundtracksResponse.prototype.getSoundtracksList = function() {
  return /** @type{!Array<!proto.services.tracks.Soundtrack>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.services.tracks.Soundtrack, 1));
};


/**
 * @param {!Array<!proto.services.tracks.Soundtrack>} value
 * @return {!proto.services.tracks.ListSoundtracksResponse} returns this
*/
proto.services.tracks.ListSoundtracksResponse.prototype.setSoundtracksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.services.tracks.Soundtrack=} opt_value
 * @param {number=} opt_index
 * @return {!proto.services.tracks.Soundtrack}
 */
proto.services.tracks.ListSoundtracksResponse.prototype.addSoundtracks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.services.tracks.Soundtrack, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.services.tracks.ListSoundtracksResponse} returns this
 */
proto.services.tracks.ListSoundtracksResponse.prototype.clearSoundtracksList = function() {
  return this.setSoundtracksList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.services.tracks.DeleteSoundtrackRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.services.tracks.DeleteSoundtrackRequest.ParamsCase = {
  PARAMS_NOT_SET: 0,
  ID: 1,
  NAME: 2
};

/**
 * @return {proto.services.tracks.DeleteSoundtrackRequest.ParamsCase}
 */
proto.services.tracks.DeleteSoundtrackRequest.prototype.getParamsCase = function() {
  return /** @type {proto.services.tracks.DeleteSoundtrackRequest.ParamsCase} */(jspb.Message.computeOneofCase(this, proto.services.tracks.DeleteSoundtrackRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.tracks.DeleteSoundtrackRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.tracks.DeleteSoundtrackRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.tracks.DeleteSoundtrackRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.DeleteSoundtrackRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.tracks.DeleteSoundtrackRequest}
 */
proto.services.tracks.DeleteSoundtrackRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.tracks.DeleteSoundtrackRequest;
  return proto.services.tracks.DeleteSoundtrackRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.tracks.DeleteSoundtrackRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.tracks.DeleteSoundtrackRequest}
 */
proto.services.tracks.DeleteSoundtrackRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.tracks.DeleteSoundtrackRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.tracks.DeleteSoundtrackRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.tracks.DeleteSoundtrackRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.DeleteSoundtrackRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.services.tracks.DeleteSoundtrackRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.tracks.DeleteSoundtrackRequest} returns this
 */
proto.services.tracks.DeleteSoundtrackRequest.prototype.setId = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.services.tracks.DeleteSoundtrackRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.services.tracks.DeleteSoundtrackRequest} returns this
 */
proto.services.tracks.DeleteSoundtrackRequest.prototype.clearId = function() {
  return jspb.Message.setOneofField(this, 1, proto.services.tracks.DeleteSoundtrackRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.tracks.DeleteSoundtrackRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.services.tracks.DeleteSoundtrackRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.tracks.DeleteSoundtrackRequest} returns this
 */
proto.services.tracks.DeleteSoundtrackRequest.prototype.setName = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.services.tracks.DeleteSoundtrackRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.services.tracks.DeleteSoundtrackRequest} returns this
 */
proto.services.tracks.DeleteSoundtrackRequest.prototype.clearName = function() {
  return jspb.Message.setOneofField(this, 2, proto.services.tracks.DeleteSoundtrackRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.tracks.DeleteSoundtrackRequest.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.tracks.DeleteSoundtrackResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.tracks.DeleteSoundtrackResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.tracks.DeleteSoundtrackResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.DeleteSoundtrackResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.tracks.DeleteSoundtrackResponse}
 */
proto.services.tracks.DeleteSoundtrackResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.tracks.DeleteSoundtrackResponse;
  return proto.services.tracks.DeleteSoundtrackResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.tracks.DeleteSoundtrackResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.tracks.DeleteSoundtrackResponse}
 */
proto.services.tracks.DeleteSoundtrackResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.tracks.DeleteSoundtrackResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.tracks.DeleteSoundtrackResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.tracks.DeleteSoundtrackResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.DeleteSoundtrackResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.tracks.UpdateSoundtrackRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.tracks.UpdateSoundtrackRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.tracks.UpdateSoundtrackRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.UpdateSoundtrackRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    soundtrack: (f = msg.getSoundtrack()) && proto.services.tracks.Soundtrack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.tracks.UpdateSoundtrackRequest}
 */
proto.services.tracks.UpdateSoundtrackRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.tracks.UpdateSoundtrackRequest;
  return proto.services.tracks.UpdateSoundtrackRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.tracks.UpdateSoundtrackRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.tracks.UpdateSoundtrackRequest}
 */
proto.services.tracks.UpdateSoundtrackRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.tracks.Soundtrack;
      reader.readMessage(value,proto.services.tracks.Soundtrack.deserializeBinaryFromReader);
      msg.setSoundtrack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.tracks.UpdateSoundtrackRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.tracks.UpdateSoundtrackRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.tracks.UpdateSoundtrackRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.UpdateSoundtrackRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoundtrack();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.tracks.Soundtrack.serializeBinaryToWriter
    );
  }
};


/**
 * optional Soundtrack soundtrack = 1;
 * @return {?proto.services.tracks.Soundtrack}
 */
proto.services.tracks.UpdateSoundtrackRequest.prototype.getSoundtrack = function() {
  return /** @type{?proto.services.tracks.Soundtrack} */ (
    jspb.Message.getWrapperField(this, proto.services.tracks.Soundtrack, 1));
};


/**
 * @param {?proto.services.tracks.Soundtrack|undefined} value
 * @return {!proto.services.tracks.UpdateSoundtrackRequest} returns this
*/
proto.services.tracks.UpdateSoundtrackRequest.prototype.setSoundtrack = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.tracks.UpdateSoundtrackRequest} returns this
 */
proto.services.tracks.UpdateSoundtrackRequest.prototype.clearSoundtrack = function() {
  return this.setSoundtrack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.tracks.UpdateSoundtrackRequest.prototype.hasSoundtrack = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.tracks.UpdateSoundtrackResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.tracks.UpdateSoundtrackResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.tracks.UpdateSoundtrackResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.UpdateSoundtrackResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    soundtrack: (f = msg.getSoundtrack()) && proto.services.tracks.Soundtrack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.tracks.UpdateSoundtrackResponse}
 */
proto.services.tracks.UpdateSoundtrackResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.tracks.UpdateSoundtrackResponse;
  return proto.services.tracks.UpdateSoundtrackResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.tracks.UpdateSoundtrackResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.tracks.UpdateSoundtrackResponse}
 */
proto.services.tracks.UpdateSoundtrackResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.tracks.Soundtrack;
      reader.readMessage(value,proto.services.tracks.Soundtrack.deserializeBinaryFromReader);
      msg.setSoundtrack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.tracks.UpdateSoundtrackResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.tracks.UpdateSoundtrackResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.tracks.UpdateSoundtrackResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.UpdateSoundtrackResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoundtrack();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.tracks.Soundtrack.serializeBinaryToWriter
    );
  }
};


/**
 * optional Soundtrack soundtrack = 1;
 * @return {?proto.services.tracks.Soundtrack}
 */
proto.services.tracks.UpdateSoundtrackResponse.prototype.getSoundtrack = function() {
  return /** @type{?proto.services.tracks.Soundtrack} */ (
    jspb.Message.getWrapperField(this, proto.services.tracks.Soundtrack, 1));
};


/**
 * @param {?proto.services.tracks.Soundtrack|undefined} value
 * @return {!proto.services.tracks.UpdateSoundtrackResponse} returns this
*/
proto.services.tracks.UpdateSoundtrackResponse.prototype.setSoundtrack = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.tracks.UpdateSoundtrackResponse} returns this
 */
proto.services.tracks.UpdateSoundtrackResponse.prototype.clearSoundtrack = function() {
  return this.setSoundtrack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.tracks.UpdateSoundtrackResponse.prototype.hasSoundtrack = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.services.tracks.GetSoundtrackRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.services.tracks.GetSoundtrackRequest.ParamsCase = {
  PARAMS_NOT_SET: 0,
  ID: 1,
  NAME: 2
};

/**
 * @return {proto.services.tracks.GetSoundtrackRequest.ParamsCase}
 */
proto.services.tracks.GetSoundtrackRequest.prototype.getParamsCase = function() {
  return /** @type {proto.services.tracks.GetSoundtrackRequest.ParamsCase} */(jspb.Message.computeOneofCase(this, proto.services.tracks.GetSoundtrackRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.tracks.GetSoundtrackRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.tracks.GetSoundtrackRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.tracks.GetSoundtrackRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.GetSoundtrackRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.tracks.GetSoundtrackRequest}
 */
proto.services.tracks.GetSoundtrackRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.tracks.GetSoundtrackRequest;
  return proto.services.tracks.GetSoundtrackRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.tracks.GetSoundtrackRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.tracks.GetSoundtrackRequest}
 */
proto.services.tracks.GetSoundtrackRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.tracks.GetSoundtrackRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.tracks.GetSoundtrackRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.tracks.GetSoundtrackRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.GetSoundtrackRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.services.tracks.GetSoundtrackRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.tracks.GetSoundtrackRequest} returns this
 */
proto.services.tracks.GetSoundtrackRequest.prototype.setId = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.services.tracks.GetSoundtrackRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.services.tracks.GetSoundtrackRequest} returns this
 */
proto.services.tracks.GetSoundtrackRequest.prototype.clearId = function() {
  return jspb.Message.setOneofField(this, 1, proto.services.tracks.GetSoundtrackRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.tracks.GetSoundtrackRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.services.tracks.GetSoundtrackRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.tracks.GetSoundtrackRequest} returns this
 */
proto.services.tracks.GetSoundtrackRequest.prototype.setName = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.services.tracks.GetSoundtrackRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.services.tracks.GetSoundtrackRequest} returns this
 */
proto.services.tracks.GetSoundtrackRequest.prototype.clearName = function() {
  return jspb.Message.setOneofField(this, 2, proto.services.tracks.GetSoundtrackRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.tracks.GetSoundtrackRequest.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.tracks.GetSoundtrackResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.tracks.GetSoundtrackResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.tracks.GetSoundtrackResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.GetSoundtrackResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    soundtrack: (f = msg.getSoundtrack()) && proto.services.tracks.Soundtrack.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.tracks.GetSoundtrackResponse}
 */
proto.services.tracks.GetSoundtrackResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.tracks.GetSoundtrackResponse;
  return proto.services.tracks.GetSoundtrackResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.tracks.GetSoundtrackResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.tracks.GetSoundtrackResponse}
 */
proto.services.tracks.GetSoundtrackResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.tracks.Soundtrack;
      reader.readMessage(value,proto.services.tracks.Soundtrack.deserializeBinaryFromReader);
      msg.setSoundtrack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.tracks.GetSoundtrackResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.tracks.GetSoundtrackResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.tracks.GetSoundtrackResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.GetSoundtrackResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoundtrack();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.services.tracks.Soundtrack.serializeBinaryToWriter
    );
  }
};


/**
 * optional Soundtrack soundtrack = 1;
 * @return {?proto.services.tracks.Soundtrack}
 */
proto.services.tracks.GetSoundtrackResponse.prototype.getSoundtrack = function() {
  return /** @type{?proto.services.tracks.Soundtrack} */ (
    jspb.Message.getWrapperField(this, proto.services.tracks.Soundtrack, 1));
};


/**
 * @param {?proto.services.tracks.Soundtrack|undefined} value
 * @return {!proto.services.tracks.GetSoundtrackResponse} returns this
*/
proto.services.tracks.GetSoundtrackResponse.prototype.setSoundtrack = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.services.tracks.GetSoundtrackResponse} returns this
 */
proto.services.tracks.GetSoundtrackResponse.prototype.clearSoundtrack = function() {
  return this.setSoundtrack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.services.tracks.GetSoundtrackResponse.prototype.hasSoundtrack = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.tracks.GetMovieSoundtrackRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.services.tracks.GetMovieSoundtrackRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.tracks.GetMovieSoundtrackRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.GetMovieSoundtrackRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    movieId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.tracks.GetMovieSoundtrackRequest}
 */
proto.services.tracks.GetMovieSoundtrackRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.tracks.GetMovieSoundtrackRequest;
  return proto.services.tracks.GetMovieSoundtrackRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.tracks.GetMovieSoundtrackRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.tracks.GetMovieSoundtrackRequest}
 */
proto.services.tracks.GetMovieSoundtrackRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMovieId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.tracks.GetMovieSoundtrackRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.tracks.GetMovieSoundtrackRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.tracks.GetMovieSoundtrackRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.GetMovieSoundtrackRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMovieId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string movie_id = 1;
 * @return {string}
 */
proto.services.tracks.GetMovieSoundtrackRequest.prototype.getMovieId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.services.tracks.GetMovieSoundtrackRequest} returns this
 */
proto.services.tracks.GetMovieSoundtrackRequest.prototype.setMovieId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.services.tracks.GetMovieSoundtrackResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.services.tracks.GetMovieSoundtrackResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.services.tracks.GetMovieSoundtrackResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.services.tracks.GetMovieSoundtrackResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.GetMovieSoundtrackResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    soundtracksList: jspb.Message.toObjectList(msg.getSoundtracksList(),
    proto.services.tracks.Soundtrack.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.services.tracks.GetMovieSoundtrackResponse}
 */
proto.services.tracks.GetMovieSoundtrackResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.services.tracks.GetMovieSoundtrackResponse;
  return proto.services.tracks.GetMovieSoundtrackResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.services.tracks.GetMovieSoundtrackResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.services.tracks.GetMovieSoundtrackResponse}
 */
proto.services.tracks.GetMovieSoundtrackResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.services.tracks.Soundtrack;
      reader.readMessage(value,proto.services.tracks.Soundtrack.deserializeBinaryFromReader);
      msg.addSoundtracks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.services.tracks.GetMovieSoundtrackResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.services.tracks.GetMovieSoundtrackResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.services.tracks.GetMovieSoundtrackResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.services.tracks.GetMovieSoundtrackResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSoundtracksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.services.tracks.Soundtrack.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Soundtrack soundtracks = 1;
 * @return {!Array<!proto.services.tracks.Soundtrack>}
 */
proto.services.tracks.GetMovieSoundtrackResponse.prototype.getSoundtracksList = function() {
  return /** @type{!Array<!proto.services.tracks.Soundtrack>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.services.tracks.Soundtrack, 1));
};


/**
 * @param {!Array<!proto.services.tracks.Soundtrack>} value
 * @return {!proto.services.tracks.GetMovieSoundtrackResponse} returns this
*/
proto.services.tracks.GetMovieSoundtrackResponse.prototype.setSoundtracksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.services.tracks.Soundtrack=} opt_value
 * @param {number=} opt_index
 * @return {!proto.services.tracks.Soundtrack}
 */
proto.services.tracks.GetMovieSoundtrackResponse.prototype.addSoundtracks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.services.tracks.Soundtrack, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.services.tracks.GetMovieSoundtrackResponse} returns this
 */
proto.services.tracks.GetMovieSoundtrackResponse.prototype.clearSoundtracksList = function() {
  return this.setSoundtracksList([]);
};


goog.object.extend(exports, proto.services.tracks);
