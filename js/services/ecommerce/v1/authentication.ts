// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               v3.12.4
// source: services/ecommerce/v1/authentication.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Meta } from "../../../common/messages";

export const protobufPackage = "services.auth";

/** User type - Determines the role of the user */
export enum UserType {
  UNKNOWN = 0,
  BUYER = 1,
  SELLER = 2,
  UNRECOGNIZED = -1,
}

export function userTypeFromJSON(object: any): UserType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return UserType.UNKNOWN;
    case 1:
    case "BUYER":
      return UserType.BUYER;
    case 2:
    case "SELLER":
      return UserType.SELLER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserType.UNRECOGNIZED;
  }
}

export function userTypeToJSON(object: UserType): string {
  switch (object) {
    case UserType.UNKNOWN:
      return "UNKNOWN";
    case UserType.BUYER:
      return "BUYER";
    case UserType.SELLER:
      return "SELLER";
    case UserType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BuyerAddresses {
  dropoffAddresses: string[];
}

export interface SellerAddresses {
  pickupAddresses: string[];
}

/** Login Request - User credentials */
export interface LoginRequest {
  /** For users logging in with email */
  email?:
    | string
    | undefined;
  /** For users logging in with phone number */
  phone?: string | undefined;
  password: string;
}

export interface AuthTokens {
  token: string;
  refreshToken: string;
}

/** Login Response - Contains JWT token */
export interface LoginResponse {
  tokens?: AuthTokens | undefined;
  error?: string | undefined;
}

/** Refresh Token Request - Uses refresh token to get a new access token */
export interface RefreshTokenRequest {
}

/** Logout Request - Request to invalidate the token */
export interface LogoutRequest {
}

/** Logout Response - Acknowledges successful token invalidation */
export interface LogoutResponse {
  success: boolean;
}

/** Register Request - User registration details */
export interface RegisterRequest {
  name: string;
  email: string;
  password: string;
  phone: string;
  address: string;
  sellerAddresses?: SellerAddresses | undefined;
  buyerAddresses?: BuyerAddresses | undefined;
}

/** Forgot Password Request */
export interface ForgotPasswordRequest {
  /** User's email for sending reset link or token */
  email: string;
}

/** Forgot Password Response */
export interface ForgotPasswordResponse {
  /** Indicates if the request was successful */
  success: boolean;
  /** Optional user-friendly message */
  message: string;
}

/** Reset Password Request */
export interface ResetPasswordRequest {
  /** Token received from ForgotPassword */
  resetToken: string;
  /** New password to set */
  newPassword: string;
}

/** Reset Password Response */
export interface ResetPasswordResponse {
  /** Indicates if the password was successfully reset */
  success: boolean;
  /** Optional user-friendly message */
  message: string;
}

/** Buyer Profile fields */
export interface UpdateProfileRequest {
  name: string;
  email: string;
  phone: string;
  address: string;
  sellerAddresses?: SellerAddresses | undefined;
  buyerAddresses?: BuyerAddresses | undefined;
}

/** Update Profile Response */
export interface UpdateProfileResponse {
  success: boolean;
  message: string;
}

/** Only for internal use */
export interface BuyerInternal {
  meta?: Meta | undefined;
  name: string;
  email: string;
  password: string;
  phone: string;
  primaryAddress: string;
  deliveryAddresses: string[];
}

export interface SellerInternal {
  meta?: Meta | undefined;
  name: string;
  email: string;
  password: string;
  phone: string;
  primaryAddress: string;
  pickupAddresses: string[];
}

function createBaseBuyerAddresses(): BuyerAddresses {
  return { dropoffAddresses: [] };
}

export const BuyerAddresses: MessageFns<BuyerAddresses> = {
  encode(message: BuyerAddresses, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dropoffAddresses) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuyerAddresses {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuyerAddresses();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.dropoffAddresses.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuyerAddresses {
    return {
      dropoffAddresses: globalThis.Array.isArray(object?.dropoffAddresses)
        ? object.dropoffAddresses.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: BuyerAddresses): unknown {
    const obj: any = {};
    if (message.dropoffAddresses?.length) {
      obj.dropoffAddresses = message.dropoffAddresses;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BuyerAddresses>, I>>(base?: I): BuyerAddresses {
    return BuyerAddresses.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BuyerAddresses>, I>>(object: I): BuyerAddresses {
    const message = createBaseBuyerAddresses();
    message.dropoffAddresses = object.dropoffAddresses?.map((e) => e) || [];
    return message;
  },
};

function createBaseSellerAddresses(): SellerAddresses {
  return { pickupAddresses: [] };
}

export const SellerAddresses: MessageFns<SellerAddresses> = {
  encode(message: SellerAddresses, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.pickupAddresses) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SellerAddresses {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSellerAddresses();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pickupAddresses.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SellerAddresses {
    return {
      pickupAddresses: globalThis.Array.isArray(object?.pickupAddresses)
        ? object.pickupAddresses.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: SellerAddresses): unknown {
    const obj: any = {};
    if (message.pickupAddresses?.length) {
      obj.pickupAddresses = message.pickupAddresses;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SellerAddresses>, I>>(base?: I): SellerAddresses {
    return SellerAddresses.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SellerAddresses>, I>>(object: I): SellerAddresses {
    const message = createBaseSellerAddresses();
    message.pickupAddresses = object.pickupAddresses?.map((e) => e) || [];
    return message;
  },
};

function createBaseLoginRequest(): LoginRequest {
  return { email: undefined, phone: undefined, password: "" };
}

export const LoginRequest: MessageFns<LoginRequest> = {
  encode(message: LoginRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== undefined) {
      writer.uint32(10).string(message.email);
    }
    if (message.phone !== undefined) {
      writer.uint32(18).string(message.phone);
    }
    if (message.password !== "") {
      writer.uint32(26).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : undefined,
      phone: isSet(object.phone) ? globalThis.String(object.phone) : undefined,
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: LoginRequest): unknown {
    const obj: any = {};
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    if (message.phone !== undefined) {
      obj.phone = message.phone;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginRequest>, I>>(base?: I): LoginRequest {
    return LoginRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoginRequest>, I>>(object: I): LoginRequest {
    const message = createBaseLoginRequest();
    message.email = object.email ?? undefined;
    message.phone = object.phone ?? undefined;
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseAuthTokens(): AuthTokens {
  return { token: "", refreshToken: "" };
}

export const AuthTokens: MessageFns<AuthTokens> = {
  encode(message: AuthTokens, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.refreshToken !== "") {
      writer.uint32(18).string(message.refreshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthTokens {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthTokens();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthTokens {
    return {
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
    };
  },

  toJSON(message: AuthTokens): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthTokens>, I>>(base?: I): AuthTokens {
    return AuthTokens.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthTokens>, I>>(object: I): AuthTokens {
    const message = createBaseAuthTokens();
    message.token = object.token ?? "";
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

function createBaseLoginResponse(): LoginResponse {
  return { tokens: undefined, error: undefined };
}

export const LoginResponse: MessageFns<LoginResponse> = {
  encode(message: LoginResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tokens !== undefined) {
      AuthTokens.encode(message.tokens, writer.uint32(10).fork()).join();
    }
    if (message.error !== undefined) {
      writer.uint32(18).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tokens = AuthTokens.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginResponse {
    return {
      tokens: isSet(object.tokens) ? AuthTokens.fromJSON(object.tokens) : undefined,
      error: isSet(object.error) ? globalThis.String(object.error) : undefined,
    };
  },

  toJSON(message: LoginResponse): unknown {
    const obj: any = {};
    if (message.tokens !== undefined) {
      obj.tokens = AuthTokens.toJSON(message.tokens);
    }
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginResponse>, I>>(base?: I): LoginResponse {
    return LoginResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoginResponse>, I>>(object: I): LoginResponse {
    const message = createBaseLoginResponse();
    message.tokens = (object.tokens !== undefined && object.tokens !== null)
      ? AuthTokens.fromPartial(object.tokens)
      : undefined;
    message.error = object.error ?? undefined;
    return message;
  },
};

function createBaseRefreshTokenRequest(): RefreshTokenRequest {
  return {};
}

export const RefreshTokenRequest: MessageFns<RefreshTokenRequest> = {
  encode(_: RefreshTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RefreshTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRefreshTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RefreshTokenRequest {
    return {};
  },

  toJSON(_: RefreshTokenRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RefreshTokenRequest>, I>>(base?: I): RefreshTokenRequest {
    return RefreshTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RefreshTokenRequest>, I>>(_: I): RefreshTokenRequest {
    const message = createBaseRefreshTokenRequest();
    return message;
  },
};

function createBaseLogoutRequest(): LogoutRequest {
  return {};
}

export const LogoutRequest: MessageFns<LogoutRequest> = {
  encode(_: LogoutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogoutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogoutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): LogoutRequest {
    return {};
  },

  toJSON(_: LogoutRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<LogoutRequest>, I>>(base?: I): LogoutRequest {
    return LogoutRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LogoutRequest>, I>>(_: I): LogoutRequest {
    const message = createBaseLogoutRequest();
    return message;
  },
};

function createBaseLogoutResponse(): LogoutResponse {
  return { success: false };
}

export const LogoutResponse: MessageFns<LogoutResponse> = {
  encode(message: LogoutResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogoutResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogoutResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LogoutResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: LogoutResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LogoutResponse>, I>>(base?: I): LogoutResponse {
    return LogoutResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LogoutResponse>, I>>(object: I): LogoutResponse {
    const message = createBaseLogoutResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseRegisterRequest(): RegisterRequest {
  return {
    name: "",
    email: "",
    password: "",
    phone: "",
    address: "",
    sellerAddresses: undefined,
    buyerAddresses: undefined,
  };
}

export const RegisterRequest: MessageFns<RegisterRequest> = {
  encode(message: RegisterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(26).string(message.password);
    }
    if (message.phone !== "") {
      writer.uint32(34).string(message.phone);
    }
    if (message.address !== "") {
      writer.uint32(42).string(message.address);
    }
    if (message.sellerAddresses !== undefined) {
      SellerAddresses.encode(message.sellerAddresses, writer.uint32(50).fork()).join();
    }
    if (message.buyerAddresses !== undefined) {
      BuyerAddresses.encode(message.buyerAddresses, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.sellerAddresses = SellerAddresses.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.buyerAddresses = BuyerAddresses.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      sellerAddresses: isSet(object.sellerAddresses) ? SellerAddresses.fromJSON(object.sellerAddresses) : undefined,
      buyerAddresses: isSet(object.buyerAddresses) ? BuyerAddresses.fromJSON(object.buyerAddresses) : undefined,
    };
  },

  toJSON(message: RegisterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.sellerAddresses !== undefined) {
      obj.sellerAddresses = SellerAddresses.toJSON(message.sellerAddresses);
    }
    if (message.buyerAddresses !== undefined) {
      obj.buyerAddresses = BuyerAddresses.toJSON(message.buyerAddresses);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegisterRequest>, I>>(base?: I): RegisterRequest {
    return RegisterRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegisterRequest>, I>>(object: I): RegisterRequest {
    const message = createBaseRegisterRequest();
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.phone = object.phone ?? "";
    message.address = object.address ?? "";
    message.sellerAddresses = (object.sellerAddresses !== undefined && object.sellerAddresses !== null)
      ? SellerAddresses.fromPartial(object.sellerAddresses)
      : undefined;
    message.buyerAddresses = (object.buyerAddresses !== undefined && object.buyerAddresses !== null)
      ? BuyerAddresses.fromPartial(object.buyerAddresses)
      : undefined;
    return message;
  },
};

function createBaseForgotPasswordRequest(): ForgotPasswordRequest {
  return { email: "" };
}

export const ForgotPasswordRequest: MessageFns<ForgotPasswordRequest> = {
  encode(message: ForgotPasswordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ForgotPasswordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseForgotPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ForgotPasswordRequest {
    return { email: isSet(object.email) ? globalThis.String(object.email) : "" };
  },

  toJSON(message: ForgotPasswordRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ForgotPasswordRequest>, I>>(base?: I): ForgotPasswordRequest {
    return ForgotPasswordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ForgotPasswordRequest>, I>>(object: I): ForgotPasswordRequest {
    const message = createBaseForgotPasswordRequest();
    message.email = object.email ?? "";
    return message;
  },
};

function createBaseForgotPasswordResponse(): ForgotPasswordResponse {
  return { success: false, message: "" };
}

export const ForgotPasswordResponse: MessageFns<ForgotPasswordResponse> = {
  encode(message: ForgotPasswordResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ForgotPasswordResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseForgotPasswordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ForgotPasswordResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: ForgotPasswordResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ForgotPasswordResponse>, I>>(base?: I): ForgotPasswordResponse {
    return ForgotPasswordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ForgotPasswordResponse>, I>>(object: I): ForgotPasswordResponse {
    const message = createBaseForgotPasswordResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseResetPasswordRequest(): ResetPasswordRequest {
  return { resetToken: "", newPassword: "" };
}

export const ResetPasswordRequest: MessageFns<ResetPasswordRequest> = {
  encode(message: ResetPasswordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resetToken !== "") {
      writer.uint32(10).string(message.resetToken);
    }
    if (message.newPassword !== "") {
      writer.uint32(18).string(message.newPassword);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetPasswordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resetToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.newPassword = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetPasswordRequest {
    return {
      resetToken: isSet(object.resetToken) ? globalThis.String(object.resetToken) : "",
      newPassword: isSet(object.newPassword) ? globalThis.String(object.newPassword) : "",
    };
  },

  toJSON(message: ResetPasswordRequest): unknown {
    const obj: any = {};
    if (message.resetToken !== "") {
      obj.resetToken = message.resetToken;
    }
    if (message.newPassword !== "") {
      obj.newPassword = message.newPassword;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetPasswordRequest>, I>>(base?: I): ResetPasswordRequest {
    return ResetPasswordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetPasswordRequest>, I>>(object: I): ResetPasswordRequest {
    const message = createBaseResetPasswordRequest();
    message.resetToken = object.resetToken ?? "";
    message.newPassword = object.newPassword ?? "";
    return message;
  },
};

function createBaseResetPasswordResponse(): ResetPasswordResponse {
  return { success: false, message: "" };
}

export const ResetPasswordResponse: MessageFns<ResetPasswordResponse> = {
  encode(message: ResetPasswordResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetPasswordResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetPasswordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetPasswordResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: ResetPasswordResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetPasswordResponse>, I>>(base?: I): ResetPasswordResponse {
    return ResetPasswordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetPasswordResponse>, I>>(object: I): ResetPasswordResponse {
    const message = createBaseResetPasswordResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseUpdateProfileRequest(): UpdateProfileRequest {
  return { name: "", email: "", phone: "", address: "", sellerAddresses: undefined, buyerAddresses: undefined };
}

export const UpdateProfileRequest: MessageFns<UpdateProfileRequest> = {
  encode(message: UpdateProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.phone !== "") {
      writer.uint32(26).string(message.phone);
    }
    if (message.address !== "") {
      writer.uint32(34).string(message.address);
    }
    if (message.sellerAddresses !== undefined) {
      SellerAddresses.encode(message.sellerAddresses, writer.uint32(42).fork()).join();
    }
    if (message.buyerAddresses !== undefined) {
      BuyerAddresses.encode(message.buyerAddresses, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sellerAddresses = SellerAddresses.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.buyerAddresses = BuyerAddresses.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProfileRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      sellerAddresses: isSet(object.sellerAddresses) ? SellerAddresses.fromJSON(object.sellerAddresses) : undefined,
      buyerAddresses: isSet(object.buyerAddresses) ? BuyerAddresses.fromJSON(object.buyerAddresses) : undefined,
    };
  },

  toJSON(message: UpdateProfileRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.sellerAddresses !== undefined) {
      obj.sellerAddresses = SellerAddresses.toJSON(message.sellerAddresses);
    }
    if (message.buyerAddresses !== undefined) {
      obj.buyerAddresses = BuyerAddresses.toJSON(message.buyerAddresses);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProfileRequest>, I>>(base?: I): UpdateProfileRequest {
    return UpdateProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProfileRequest>, I>>(object: I): UpdateProfileRequest {
    const message = createBaseUpdateProfileRequest();
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.phone = object.phone ?? "";
    message.address = object.address ?? "";
    message.sellerAddresses = (object.sellerAddresses !== undefined && object.sellerAddresses !== null)
      ? SellerAddresses.fromPartial(object.sellerAddresses)
      : undefined;
    message.buyerAddresses = (object.buyerAddresses !== undefined && object.buyerAddresses !== null)
      ? BuyerAddresses.fromPartial(object.buyerAddresses)
      : undefined;
    return message;
  },
};

function createBaseUpdateProfileResponse(): UpdateProfileResponse {
  return { success: false, message: "" };
}

export const UpdateProfileResponse: MessageFns<UpdateProfileResponse> = {
  encode(message: UpdateProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProfileResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: UpdateProfileResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProfileResponse>, I>>(base?: I): UpdateProfileResponse {
    return UpdateProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProfileResponse>, I>>(object: I): UpdateProfileResponse {
    const message = createBaseUpdateProfileResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseBuyerInternal(): BuyerInternal {
  return { meta: undefined, name: "", email: "", password: "", phone: "", primaryAddress: "", deliveryAddresses: [] };
}

export const BuyerInternal: MessageFns<BuyerInternal> = {
  encode(message: BuyerInternal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.meta !== undefined) {
      Meta.encode(message.meta, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(34).string(message.password);
    }
    if (message.phone !== "") {
      writer.uint32(42).string(message.phone);
    }
    if (message.primaryAddress !== "") {
      writer.uint32(50).string(message.primaryAddress);
    }
    for (const v of message.deliveryAddresses) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuyerInternal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuyerInternal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.meta = Meta.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.primaryAddress = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.deliveryAddresses.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuyerInternal {
    return {
      meta: isSet(object.meta) ? Meta.fromJSON(object.meta) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
      primaryAddress: isSet(object.primaryAddress) ? globalThis.String(object.primaryAddress) : "",
      deliveryAddresses: globalThis.Array.isArray(object?.deliveryAddresses)
        ? object.deliveryAddresses.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: BuyerInternal): unknown {
    const obj: any = {};
    if (message.meta !== undefined) {
      obj.meta = Meta.toJSON(message.meta);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.primaryAddress !== "") {
      obj.primaryAddress = message.primaryAddress;
    }
    if (message.deliveryAddresses?.length) {
      obj.deliveryAddresses = message.deliveryAddresses;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BuyerInternal>, I>>(base?: I): BuyerInternal {
    return BuyerInternal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BuyerInternal>, I>>(object: I): BuyerInternal {
    const message = createBaseBuyerInternal();
    message.meta = (object.meta !== undefined && object.meta !== null) ? Meta.fromPartial(object.meta) : undefined;
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.phone = object.phone ?? "";
    message.primaryAddress = object.primaryAddress ?? "";
    message.deliveryAddresses = object.deliveryAddresses?.map((e) => e) || [];
    return message;
  },
};

function createBaseSellerInternal(): SellerInternal {
  return { meta: undefined, name: "", email: "", password: "", phone: "", primaryAddress: "", pickupAddresses: [] };
}

export const SellerInternal: MessageFns<SellerInternal> = {
  encode(message: SellerInternal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.meta !== undefined) {
      Meta.encode(message.meta, writer.uint32(10).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(34).string(message.password);
    }
    if (message.phone !== "") {
      writer.uint32(42).string(message.phone);
    }
    if (message.primaryAddress !== "") {
      writer.uint32(50).string(message.primaryAddress);
    }
    for (const v of message.pickupAddresses) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SellerInternal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSellerInternal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.meta = Meta.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.primaryAddress = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.pickupAddresses.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SellerInternal {
    return {
      meta: isSet(object.meta) ? Meta.fromJSON(object.meta) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
      primaryAddress: isSet(object.primaryAddress) ? globalThis.String(object.primaryAddress) : "",
      pickupAddresses: globalThis.Array.isArray(object?.pickupAddresses)
        ? object.pickupAddresses.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: SellerInternal): unknown {
    const obj: any = {};
    if (message.meta !== undefined) {
      obj.meta = Meta.toJSON(message.meta);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.primaryAddress !== "") {
      obj.primaryAddress = message.primaryAddress;
    }
    if (message.pickupAddresses?.length) {
      obj.pickupAddresses = message.pickupAddresses;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SellerInternal>, I>>(base?: I): SellerInternal {
    return SellerInternal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SellerInternal>, I>>(object: I): SellerInternal {
    const message = createBaseSellerInternal();
    message.meta = (object.meta !== undefined && object.meta !== null) ? Meta.fromPartial(object.meta) : undefined;
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.phone = object.phone ?? "";
    message.primaryAddress = object.primaryAddress ?? "";
    message.pickupAddresses = object.pickupAddresses?.map((e) => e) || [];
    return message;
  },
};

export interface AuthService {
  /** Register - creates a new user account and returns a JWT token */
  Register(request: RegisterRequest): Promise<LoginResponse>;
  /** Login - returns a JWT token for the provided credentials */
  Login(request: LoginRequest): Promise<LoginResponse>;
  /** RefreshToken - returns a new JWT token using a valid refresh token */
  RefreshToken(request: RefreshTokenRequest): Promise<LoginResponse>;
  /** Logout - optional method to invalidate a refresh token (revocation/blacklist) */
  Logout(request: LogoutRequest): Promise<LogoutResponse>;
  /** Forgot Password - sends a reset link or token to the user */
  ForgotPassword(request: ForgotPasswordRequest): Promise<ForgotPasswordResponse>;
  /** Reset Password - updates the user's password using a valid token */
  ResetPassword(request: ResetPasswordRequest): Promise<ResetPasswordResponse>;
  /** UpdateProfile - updates user profile information */
  UpdateProfile(request: UpdateProfileRequest): Promise<UpdateProfileResponse>;
}

export const AuthServiceServiceName = "services.auth.AuthService";
export class AuthServiceClientImpl implements AuthService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AuthServiceServiceName;
    this.rpc = rpc;
    this.Register = this.Register.bind(this);
    this.Login = this.Login.bind(this);
    this.RefreshToken = this.RefreshToken.bind(this);
    this.Logout = this.Logout.bind(this);
    this.ForgotPassword = this.ForgotPassword.bind(this);
    this.ResetPassword = this.ResetPassword.bind(this);
    this.UpdateProfile = this.UpdateProfile.bind(this);
  }
  Register(request: RegisterRequest): Promise<LoginResponse> {
    const data = RegisterRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Register", data);
    return promise.then((data) => LoginResponse.decode(new BinaryReader(data)));
  }

  Login(request: LoginRequest): Promise<LoginResponse> {
    const data = LoginRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Login", data);
    return promise.then((data) => LoginResponse.decode(new BinaryReader(data)));
  }

  RefreshToken(request: RefreshTokenRequest): Promise<LoginResponse> {
    const data = RefreshTokenRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RefreshToken", data);
    return promise.then((data) => LoginResponse.decode(new BinaryReader(data)));
  }

  Logout(request: LogoutRequest): Promise<LogoutResponse> {
    const data = LogoutRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Logout", data);
    return promise.then((data) => LogoutResponse.decode(new BinaryReader(data)));
  }

  ForgotPassword(request: ForgotPasswordRequest): Promise<ForgotPasswordResponse> {
    const data = ForgotPasswordRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ForgotPassword", data);
    return promise.then((data) => ForgotPasswordResponse.decode(new BinaryReader(data)));
  }

  ResetPassword(request: ResetPasswordRequest): Promise<ResetPasswordResponse> {
    const data = ResetPasswordRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ResetPassword", data);
    return promise.then((data) => ResetPasswordResponse.decode(new BinaryReader(data)));
  }

  UpdateProfile(request: UpdateProfileRequest): Promise<UpdateProfileResponse> {
    const data = UpdateProfileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateProfile", data);
    return promise.then((data) => UpdateProfileResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
