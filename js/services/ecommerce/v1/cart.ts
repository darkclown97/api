// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               v3.12.4
// source: services/ecommerce/v1/cart.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Meta } from "../../../common/messages";
import { Product } from "./products";

export const protobufPackage = "services.ecommerce.v1.cart";

export interface AddToCartRequest {
  productId: string;
  quantity: number;
}

export interface AddToCartResponse {
  totalCartProducts: number;
}

export interface RemoveFromCartRequest {
  productId: string;
  quantity: number;
}

export interface RemoveFromCartResponse {
  totalCartProducts: number;
}

export interface ClearCartRequest {
}

export interface ClearCartResponse {
}

export interface ViewCartRequest {
}

export interface CartItem {
  products?: Product | undefined;
  quantity: number;
}

export interface ViewCartResponse {
  products: CartItem[];
  totalCartProducts: number;
}

/** Only for internal use */
export interface CartInternal {
  meta?: Meta | undefined;
  buyerId: string;
  products: CartItem[];
  totalPrice: number;
}

function createBaseAddToCartRequest(): AddToCartRequest {
  return { productId: "", quantity: 0 };
}

export const AddToCartRequest: MessageFns<AddToCartRequest> = {
  encode(message: AddToCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.quantity !== 0) {
      writer.uint32(16).int32(message.quantity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddToCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddToCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddToCartRequest {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
    };
  },

  toJSON(message: AddToCartRequest): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddToCartRequest>, I>>(base?: I): AddToCartRequest {
    return AddToCartRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddToCartRequest>, I>>(object: I): AddToCartRequest {
    const message = createBaseAddToCartRequest();
    message.productId = object.productId ?? "";
    message.quantity = object.quantity ?? 0;
    return message;
  },
};

function createBaseAddToCartResponse(): AddToCartResponse {
  return { totalCartProducts: 0 };
}

export const AddToCartResponse: MessageFns<AddToCartResponse> = {
  encode(message: AddToCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalCartProducts !== 0) {
      writer.uint32(8).int32(message.totalCartProducts);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddToCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddToCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.totalCartProducts = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddToCartResponse {
    return { totalCartProducts: isSet(object.totalCartProducts) ? globalThis.Number(object.totalCartProducts) : 0 };
  },

  toJSON(message: AddToCartResponse): unknown {
    const obj: any = {};
    if (message.totalCartProducts !== 0) {
      obj.totalCartProducts = Math.round(message.totalCartProducts);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddToCartResponse>, I>>(base?: I): AddToCartResponse {
    return AddToCartResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddToCartResponse>, I>>(object: I): AddToCartResponse {
    const message = createBaseAddToCartResponse();
    message.totalCartProducts = object.totalCartProducts ?? 0;
    return message;
  },
};

function createBaseRemoveFromCartRequest(): RemoveFromCartRequest {
  return { productId: "", quantity: 0 };
}

export const RemoveFromCartRequest: MessageFns<RemoveFromCartRequest> = {
  encode(message: RemoveFromCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.quantity !== 0) {
      writer.uint32(16).int32(message.quantity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveFromCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveFromCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveFromCartRequest {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
    };
  },

  toJSON(message: RemoveFromCartRequest): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveFromCartRequest>, I>>(base?: I): RemoveFromCartRequest {
    return RemoveFromCartRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveFromCartRequest>, I>>(object: I): RemoveFromCartRequest {
    const message = createBaseRemoveFromCartRequest();
    message.productId = object.productId ?? "";
    message.quantity = object.quantity ?? 0;
    return message;
  },
};

function createBaseRemoveFromCartResponse(): RemoveFromCartResponse {
  return { totalCartProducts: 0 };
}

export const RemoveFromCartResponse: MessageFns<RemoveFromCartResponse> = {
  encode(message: RemoveFromCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalCartProducts !== 0) {
      writer.uint32(8).int32(message.totalCartProducts);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveFromCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveFromCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.totalCartProducts = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveFromCartResponse {
    return { totalCartProducts: isSet(object.totalCartProducts) ? globalThis.Number(object.totalCartProducts) : 0 };
  },

  toJSON(message: RemoveFromCartResponse): unknown {
    const obj: any = {};
    if (message.totalCartProducts !== 0) {
      obj.totalCartProducts = Math.round(message.totalCartProducts);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveFromCartResponse>, I>>(base?: I): RemoveFromCartResponse {
    return RemoveFromCartResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveFromCartResponse>, I>>(object: I): RemoveFromCartResponse {
    const message = createBaseRemoveFromCartResponse();
    message.totalCartProducts = object.totalCartProducts ?? 0;
    return message;
  },
};

function createBaseClearCartRequest(): ClearCartRequest {
  return {};
}

export const ClearCartRequest: MessageFns<ClearCartRequest> = {
  encode(_: ClearCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClearCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClearCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ClearCartRequest {
    return {};
  },

  toJSON(_: ClearCartRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ClearCartRequest>, I>>(base?: I): ClearCartRequest {
    return ClearCartRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClearCartRequest>, I>>(_: I): ClearCartRequest {
    const message = createBaseClearCartRequest();
    return message;
  },
};

function createBaseClearCartResponse(): ClearCartResponse {
  return {};
}

export const ClearCartResponse: MessageFns<ClearCartResponse> = {
  encode(_: ClearCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClearCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClearCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ClearCartResponse {
    return {};
  },

  toJSON(_: ClearCartResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ClearCartResponse>, I>>(base?: I): ClearCartResponse {
    return ClearCartResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClearCartResponse>, I>>(_: I): ClearCartResponse {
    const message = createBaseClearCartResponse();
    return message;
  },
};

function createBaseViewCartRequest(): ViewCartRequest {
  return {};
}

export const ViewCartRequest: MessageFns<ViewCartRequest> = {
  encode(_: ViewCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ViewCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseViewCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ViewCartRequest {
    return {};
  },

  toJSON(_: ViewCartRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ViewCartRequest>, I>>(base?: I): ViewCartRequest {
    return ViewCartRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ViewCartRequest>, I>>(_: I): ViewCartRequest {
    const message = createBaseViewCartRequest();
    return message;
  },
};

function createBaseCartItem(): CartItem {
  return { products: undefined, quantity: 0 };
}

export const CartItem: MessageFns<CartItem> = {
  encode(message: CartItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.products !== undefined) {
      Product.encode(message.products, writer.uint32(10).fork()).join();
    }
    if (message.quantity !== 0) {
      writer.uint32(16).int32(message.quantity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CartItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCartItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.products = Product.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CartItem {
    return {
      products: isSet(object.products) ? Product.fromJSON(object.products) : undefined,
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
    };
  },

  toJSON(message: CartItem): unknown {
    const obj: any = {};
    if (message.products !== undefined) {
      obj.products = Product.toJSON(message.products);
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CartItem>, I>>(base?: I): CartItem {
    return CartItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CartItem>, I>>(object: I): CartItem {
    const message = createBaseCartItem();
    message.products = (object.products !== undefined && object.products !== null)
      ? Product.fromPartial(object.products)
      : undefined;
    message.quantity = object.quantity ?? 0;
    return message;
  },
};

function createBaseViewCartResponse(): ViewCartResponse {
  return { products: [], totalCartProducts: 0 };
}

export const ViewCartResponse: MessageFns<ViewCartResponse> = {
  encode(message: ViewCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      CartItem.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCartProducts !== 0) {
      writer.uint32(16).int32(message.totalCartProducts);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ViewCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseViewCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.products.push(CartItem.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCartProducts = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ViewCartResponse {
    return {
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => CartItem.fromJSON(e)) : [],
      totalCartProducts: isSet(object.totalCartProducts) ? globalThis.Number(object.totalCartProducts) : 0,
    };
  },

  toJSON(message: ViewCartResponse): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => CartItem.toJSON(e));
    }
    if (message.totalCartProducts !== 0) {
      obj.totalCartProducts = Math.round(message.totalCartProducts);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ViewCartResponse>, I>>(base?: I): ViewCartResponse {
    return ViewCartResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ViewCartResponse>, I>>(object: I): ViewCartResponse {
    const message = createBaseViewCartResponse();
    message.products = object.products?.map((e) => CartItem.fromPartial(e)) || [];
    message.totalCartProducts = object.totalCartProducts ?? 0;
    return message;
  },
};

function createBaseCartInternal(): CartInternal {
  return { meta: undefined, buyerId: "", products: [], totalPrice: 0 };
}

export const CartInternal: MessageFns<CartInternal> = {
  encode(message: CartInternal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.meta !== undefined) {
      Meta.encode(message.meta, writer.uint32(10).fork()).join();
    }
    if (message.buyerId !== "") {
      writer.uint32(18).string(message.buyerId);
    }
    for (const v of message.products) {
      CartItem.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.totalPrice !== 0) {
      writer.uint32(32).int32(message.totalPrice);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CartInternal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCartInternal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.meta = Meta.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.buyerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.products.push(CartItem.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalPrice = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CartInternal {
    return {
      meta: isSet(object.meta) ? Meta.fromJSON(object.meta) : undefined,
      buyerId: isSet(object.buyerId) ? globalThis.String(object.buyerId) : "",
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => CartItem.fromJSON(e)) : [],
      totalPrice: isSet(object.totalPrice) ? globalThis.Number(object.totalPrice) : 0,
    };
  },

  toJSON(message: CartInternal): unknown {
    const obj: any = {};
    if (message.meta !== undefined) {
      obj.meta = Meta.toJSON(message.meta);
    }
    if (message.buyerId !== "") {
      obj.buyerId = message.buyerId;
    }
    if (message.products?.length) {
      obj.products = message.products.map((e) => CartItem.toJSON(e));
    }
    if (message.totalPrice !== 0) {
      obj.totalPrice = Math.round(message.totalPrice);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CartInternal>, I>>(base?: I): CartInternal {
    return CartInternal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CartInternal>, I>>(object: I): CartInternal {
    const message = createBaseCartInternal();
    message.meta = (object.meta !== undefined && object.meta !== null) ? Meta.fromPartial(object.meta) : undefined;
    message.buyerId = object.buyerId ?? "";
    message.products = object.products?.map((e) => CartItem.fromPartial(e)) || [];
    message.totalPrice = object.totalPrice ?? 0;
    return message;
  },
};

export interface CartService {
  AddToCart(request: AddToCartRequest): Promise<AddToCartResponse>;
  RemoveFromCart(request: RemoveFromCartRequest): Promise<RemoveFromCartResponse>;
  ClearCart(request: ClearCartRequest): Promise<ClearCartResponse>;
  ViewCart(request: ViewCartRequest): Promise<ViewCartResponse>;
}

export const CartServiceServiceName = "services.ecommerce.v1.cart.CartService";
export class CartServiceClientImpl implements CartService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || CartServiceServiceName;
    this.rpc = rpc;
    this.AddToCart = this.AddToCart.bind(this);
    this.RemoveFromCart = this.RemoveFromCart.bind(this);
    this.ClearCart = this.ClearCart.bind(this);
    this.ViewCart = this.ViewCart.bind(this);
  }
  AddToCart(request: AddToCartRequest): Promise<AddToCartResponse> {
    const data = AddToCartRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddToCart", data);
    return promise.then((data) => AddToCartResponse.decode(new BinaryReader(data)));
  }

  RemoveFromCart(request: RemoveFromCartRequest): Promise<RemoveFromCartResponse> {
    const data = RemoveFromCartRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveFromCart", data);
    return promise.then((data) => RemoveFromCartResponse.decode(new BinaryReader(data)));
  }

  ClearCart(request: ClearCartRequest): Promise<ClearCartResponse> {
    const data = ClearCartRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ClearCart", data);
    return promise.then((data) => ClearCartResponse.decode(new BinaryReader(data)));
  }

  ViewCart(request: ViewCartRequest): Promise<ViewCartResponse> {
    const data = ViewCartRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ViewCart", data);
    return promise.then((data) => ViewCartResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
