// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: services/tracks.proto

package tracks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SoundtrackService_AddSoundtrack_FullMethodName       = "/services.tracks.SoundtrackService/AddSoundtrack"
	SoundtrackService_ListSoundtracks_FullMethodName     = "/services.tracks.SoundtrackService/ListSoundtracks"
	SoundtrackService_DeleteSoundtrack_FullMethodName    = "/services.tracks.SoundtrackService/DeleteSoundtrack"
	SoundtrackService_UpdateSoundtrack_FullMethodName    = "/services.tracks.SoundtrackService/UpdateSoundtrack"
	SoundtrackService_GetSoundtrack_FullMethodName       = "/services.tracks.SoundtrackService/GetSoundtrack"
	SoundtrackService_GetMovieSoundtracks_FullMethodName = "/services.tracks.SoundtrackService/GetMovieSoundtracks"
)

// SoundtrackServiceClient is the client API for SoundtrackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SoundtrackServiceClient interface {
	AddSoundtrack(ctx context.Context, in *AddSoundtrackRequest, opts ...grpc.CallOption) (*AddSoundtrackResponse, error)
	ListSoundtracks(ctx context.Context, in *ListSoundtracksRequest, opts ...grpc.CallOption) (*ListSoundtracksResponse, error)
	DeleteSoundtrack(ctx context.Context, in *DeleteSoundtrackRequest, opts ...grpc.CallOption) (*DeleteSoundtrackResponse, error)
	UpdateSoundtrack(ctx context.Context, in *UpdateSoundtrackRequest, opts ...grpc.CallOption) (*UpdateSoundtrackResponse, error)
	GetSoundtrack(ctx context.Context, in *GetSoundtrackRequest, opts ...grpc.CallOption) (*GetSoundtrackResponse, error)
	GetMovieSoundtracks(ctx context.Context, in *GetMovieSoundtrackRequest, opts ...grpc.CallOption) (*GetMovieSoundtrackResponse, error)
}

type soundtrackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSoundtrackServiceClient(cc grpc.ClientConnInterface) SoundtrackServiceClient {
	return &soundtrackServiceClient{cc}
}

func (c *soundtrackServiceClient) AddSoundtrack(ctx context.Context, in *AddSoundtrackRequest, opts ...grpc.CallOption) (*AddSoundtrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSoundtrackResponse)
	err := c.cc.Invoke(ctx, SoundtrackService_AddSoundtrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soundtrackServiceClient) ListSoundtracks(ctx context.Context, in *ListSoundtracksRequest, opts ...grpc.CallOption) (*ListSoundtracksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSoundtracksResponse)
	err := c.cc.Invoke(ctx, SoundtrackService_ListSoundtracks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soundtrackServiceClient) DeleteSoundtrack(ctx context.Context, in *DeleteSoundtrackRequest, opts ...grpc.CallOption) (*DeleteSoundtrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSoundtrackResponse)
	err := c.cc.Invoke(ctx, SoundtrackService_DeleteSoundtrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soundtrackServiceClient) UpdateSoundtrack(ctx context.Context, in *UpdateSoundtrackRequest, opts ...grpc.CallOption) (*UpdateSoundtrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSoundtrackResponse)
	err := c.cc.Invoke(ctx, SoundtrackService_UpdateSoundtrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soundtrackServiceClient) GetSoundtrack(ctx context.Context, in *GetSoundtrackRequest, opts ...grpc.CallOption) (*GetSoundtrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSoundtrackResponse)
	err := c.cc.Invoke(ctx, SoundtrackService_GetSoundtrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *soundtrackServiceClient) GetMovieSoundtracks(ctx context.Context, in *GetMovieSoundtrackRequest, opts ...grpc.CallOption) (*GetMovieSoundtrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMovieSoundtrackResponse)
	err := c.cc.Invoke(ctx, SoundtrackService_GetMovieSoundtracks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoundtrackServiceServer is the server API for SoundtrackService service.
// All implementations must embed UnimplementedSoundtrackServiceServer
// for forward compatibility.
type SoundtrackServiceServer interface {
	AddSoundtrack(context.Context, *AddSoundtrackRequest) (*AddSoundtrackResponse, error)
	ListSoundtracks(context.Context, *ListSoundtracksRequest) (*ListSoundtracksResponse, error)
	DeleteSoundtrack(context.Context, *DeleteSoundtrackRequest) (*DeleteSoundtrackResponse, error)
	UpdateSoundtrack(context.Context, *UpdateSoundtrackRequest) (*UpdateSoundtrackResponse, error)
	GetSoundtrack(context.Context, *GetSoundtrackRequest) (*GetSoundtrackResponse, error)
	GetMovieSoundtracks(context.Context, *GetMovieSoundtrackRequest) (*GetMovieSoundtrackResponse, error)
	mustEmbedUnimplementedSoundtrackServiceServer()
}

// UnimplementedSoundtrackServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSoundtrackServiceServer struct{}

func (UnimplementedSoundtrackServiceServer) AddSoundtrack(context.Context, *AddSoundtrackRequest) (*AddSoundtrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSoundtrack not implemented")
}
func (UnimplementedSoundtrackServiceServer) ListSoundtracks(context.Context, *ListSoundtracksRequest) (*ListSoundtracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSoundtracks not implemented")
}
func (UnimplementedSoundtrackServiceServer) DeleteSoundtrack(context.Context, *DeleteSoundtrackRequest) (*DeleteSoundtrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSoundtrack not implemented")
}
func (UnimplementedSoundtrackServiceServer) UpdateSoundtrack(context.Context, *UpdateSoundtrackRequest) (*UpdateSoundtrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSoundtrack not implemented")
}
func (UnimplementedSoundtrackServiceServer) GetSoundtrack(context.Context, *GetSoundtrackRequest) (*GetSoundtrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoundtrack not implemented")
}
func (UnimplementedSoundtrackServiceServer) GetMovieSoundtracks(context.Context, *GetMovieSoundtrackRequest) (*GetMovieSoundtrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieSoundtracks not implemented")
}
func (UnimplementedSoundtrackServiceServer) mustEmbedUnimplementedSoundtrackServiceServer() {}
func (UnimplementedSoundtrackServiceServer) testEmbeddedByValue()                           {}

// UnsafeSoundtrackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoundtrackServiceServer will
// result in compilation errors.
type UnsafeSoundtrackServiceServer interface {
	mustEmbedUnimplementedSoundtrackServiceServer()
}

func RegisterSoundtrackServiceServer(s grpc.ServiceRegistrar, srv SoundtrackServiceServer) {
	// If the following call pancis, it indicates UnimplementedSoundtrackServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SoundtrackService_ServiceDesc, srv)
}

func _SoundtrackService_AddSoundtrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSoundtrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundtrackServiceServer).AddSoundtrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoundtrackService_AddSoundtrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundtrackServiceServer).AddSoundtrack(ctx, req.(*AddSoundtrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoundtrackService_ListSoundtracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSoundtracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundtrackServiceServer).ListSoundtracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoundtrackService_ListSoundtracks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundtrackServiceServer).ListSoundtracks(ctx, req.(*ListSoundtracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoundtrackService_DeleteSoundtrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSoundtrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundtrackServiceServer).DeleteSoundtrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoundtrackService_DeleteSoundtrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundtrackServiceServer).DeleteSoundtrack(ctx, req.(*DeleteSoundtrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoundtrackService_UpdateSoundtrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSoundtrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundtrackServiceServer).UpdateSoundtrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoundtrackService_UpdateSoundtrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundtrackServiceServer).UpdateSoundtrack(ctx, req.(*UpdateSoundtrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoundtrackService_GetSoundtrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoundtrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundtrackServiceServer).GetSoundtrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoundtrackService_GetSoundtrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundtrackServiceServer).GetSoundtrack(ctx, req.(*GetSoundtrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoundtrackService_GetMovieSoundtracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieSoundtrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoundtrackServiceServer).GetMovieSoundtracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoundtrackService_GetMovieSoundtracks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoundtrackServiceServer).GetMovieSoundtracks(ctx, req.(*GetMovieSoundtrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SoundtrackService_ServiceDesc is the grpc.ServiceDesc for SoundtrackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SoundtrackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.tracks.SoundtrackService",
	HandlerType: (*SoundtrackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSoundtrack",
			Handler:    _SoundtrackService_AddSoundtrack_Handler,
		},
		{
			MethodName: "ListSoundtracks",
			Handler:    _SoundtrackService_ListSoundtracks_Handler,
		},
		{
			MethodName: "DeleteSoundtrack",
			Handler:    _SoundtrackService_DeleteSoundtrack_Handler,
		},
		{
			MethodName: "UpdateSoundtrack",
			Handler:    _SoundtrackService_UpdateSoundtrack_Handler,
		},
		{
			MethodName: "GetSoundtrack",
			Handler:    _SoundtrackService_GetSoundtrack_Handler,
		},
		{
			MethodName: "GetMovieSoundtracks",
			Handler:    _SoundtrackService_GetMovieSoundtracks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/tracks.proto",
}
